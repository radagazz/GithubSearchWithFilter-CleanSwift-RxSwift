//
//  MainSceneViewController.swift
//  DemoAssignment
//
//  Created by anurak teerarattananukulchai on 26/9/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com

import UIKit
import Kingfisher

protocol MainSceneDisplayLogic: AnyObject {
    func displayGithubRepoSuccess(viewModel: MainScene.FetchGitHubRepo.ViewModel)
    func displayGithubRepoFail(viewModel: MainScene.FetchGitHubRepo.ViewModel)
}

class MainSceneViewController: UIViewController, MainSceneDisplayLogic {
    
    var interactor: MainSceneBusinessLogic?
    var router: (NSObjectProtocol & MainSceneRoutingLogic & MainSceneDataPassing)?
    
    private var originalMyItems: [MainScene.Repository] = []
    private var displayMyItems: [MainScene.Repository] = []
    private var keyword: String = ""
    private var searchKeyword: String {
        set {
            keyword = newValue
            
            if newValue != "" {
                displayMyItems = originalMyItems.filter { $0.fullName?.range(of: newValue, options: [.regularExpression, .caseInsensitive]) != nil }
            } else {
                displayMyItems = originalMyItems
            }
        }
        get {
            return keyword
        }
    }
    var pageNumber: Int = 1
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            tableView.delegate = self
            tableView.dataSource = self
        }
    }
    
    @IBOutlet weak var searchBar: UISearchBar!
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MainSceneInteractor()
        let presenter = MainScenePresenter()
        let router = MainSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchData(pageNumber: pageNumber)
    }
    
    // MARK: Do something
    
    func fetchData(pageNumber: Int) {
        let request = MainScene.FetchGitHubRepo.Request(pageNumber: pageNumber)
        interactor?.fetchData(request: request)
    }
    
    func filterRepo(searchText: String) {
        searchKeyword = searchText
        
        if keyword != "" && displayMyItems.isEmpty {
            // incase of nil search result
        } else {
            // incase of found result
            tableView.reloadData()
        }
    }
    
    func displayGithubRepoSuccess(viewModel: MainScene.FetchGitHubRepo.ViewModel) {
        guard let items = viewModel.data?.items else { return }
        
        originalMyItems.append(contentsOf: items)
        
        DispatchQueue.main.async {
            self.displayMyItems = self.originalMyItems
            self.tableView.reloadData()
        }
    }
    
    func displayGithubRepoFail(viewModel: MainScene.FetchGitHubRepo.ViewModel) {
        print(viewModel)
    }
}

// MARK: - UISearchBarDelegate
extension MainSceneViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchText.count >= 2 {
            //Delay search
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                self.filterRepo(searchText: searchText)
            }
            
        } else {
            filterRepo(searchText: "")
        }

    }
}

// MARK: - UITableViewDataSource, UITableViewDelegate

extension MainSceneViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayMyItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! TableViewCell
        
        let data = displayMyItems[indexPath.row]
        let imageUrl = data.owner?.avatarURL ?? ""
        let repoName = data.fullName ?? ""
        
        cell.avatarImageView.kf.indicatorType = .activity
        cell.avatarImageView.kf.setImage(with: URL(string: imageUrl))
        cell.repoNameLable.text = repoName
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let lastElement = displayMyItems.count - 1
        if indexPath.row == lastElement {
            if searchBar.text == "" || searchBar.text == nil {
                pageNumber += 1
                fetchData(pageNumber: pageNumber)
            }
        }
    }
}
